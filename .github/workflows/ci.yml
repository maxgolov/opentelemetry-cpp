name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  cmake_test:
    name: CMake test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: setup
      run: |
        sudo ./ci/setup_cmake.sh
        sudo ./ci/setup_ci_environment.sh
    - name: run tests
      run: ./ci/do_ci.sh cmake.test
    - name: run prometheus exporter tests
      run: ./ci/do_ci.sh cmake.exporter.prometheus.test

  cmake_gcc_48_test:
    name: CMake gcc 4.8
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: setup
      run: |
        sudo ./ci/setup_ci_environment.sh
        sudo ./ci/install_gcc48.sh
    - name: setup cmake
      run: |
        sudo CC=/usr/bin/gcc-4.8 CXX=/usr/bin/g++-4.8 ./ci/setup_cmake.sh
    - name: run tests
      run: ./ci/do_ci.sh cmake.legacy.test
      env:
        CC: /usr/bin/gcc-4.8
        CXX: /usr/bin/g++-4.8

  cmake_test_cxx20:
    name: CMake C++20 test
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: setup
      run: |
        sudo ./ci/setup_ci_environment.sh
        sudo ./ci/setup_cmake.sh
    - name: run tests
      run: ./ci/do_ci.sh cmake.c++20.test

  cmake_posix:
    name: Build on ${{ matrix.os }} ${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        config: [release]
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: build
      run: tools/build.sh ${{ matrix.config }}

  # TODO #1: add vs2015
  # TODO #2: consolidate cmake_[vs2015|vs2017|vs2019] into one matrix build
  cmake_windows_vs2017:
    name: Build on Windows ${{ matrix.arch }}-${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        arch: [x64]
        config: [release]
        os: [windows-2016]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: Setup build tools
      run: |
        cd "$Env:GITHUB_WORKSPACE"
        .\tools\setup-buildtools.cmd
    - name: Build
      run: |
        cd "$Env:GITHUB_WORKSPACE"
        .\tools\build-vs2017.cmd ${{ matrix.config }}

  cmake_windows_vs2019:
    name: Build on Windows ${{ matrix.arch }}-${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        arch: [x64]
        config: [release]
        os: [windows-2019]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: Setup build tools
      run: |
        cd "$Env:GITHUB_WORKSPACE"
        .\tools\setup-buildtools.cmd
    - name: Build
      run: |
        cd "$Env:GITHUB_WORKSPACE"
        .\tools\build-vs2017.cmd ${{ matrix.config }}

  plugin_test:
    name: Plugin -> CMake
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: setup
      run: |
        sudo ./ci/setup_cmake.sh
        sudo ./ci/setup_ci_environment.sh
    - name: run tests
      run: ./ci/do_ci.sh cmake.test_example_plugin

  gcc_48_test:
    name: Legacy Bazel
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: |
        sudo ./ci/setup_ci_environment.sh
        sudo ./ci/install_bazelisk.sh
        sudo ./ci/install_gcc48.sh
    - name: run tests
      run: ./ci/do_ci.sh bazel.legacy.test
      env:
        CC: /usr/bin/gcc-4.8

  bazel_test:
    name: Bazel
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: |
        sudo ./ci/setup_cmake.sh
        sudo ./ci/setup_ci_environment.sh
        sudo ./ci/install_bazelisk.sh
    - name: run tests
      run: ./ci/do_ci.sh bazel.test

  bazel_valgrind:
    name: Bazel valgrind
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: |
        sudo ./ci/setup_cmake.sh
        sudo ./ci/setup_ci_environment.sh
        sudo ./ci/install_bazelisk.sh
    - name: run tests
      run: ./ci/do_ci.sh bazel.valgrind

  bazel_noexcept:
    name: Bazel noexcept
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: |
        sudo ./ci/setup_cmake.sh
        sudo ./ci/setup_ci_environment.sh
        sudo ./ci/install_bazelisk.sh
    - name: run tests
      run: ./ci/do_ci.sh bazel.noexcept

  bazel_asan:
    name: Bazel asan config
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: |
        sudo ./ci/setup_cmake.sh
        sudo ./ci/setup_ci_environment.sh
        sudo ./ci/install_bazelisk.sh
    - name: run tests
      run: ./ci/do_ci.sh bazel.asan

  bazel_tsan:
    name: Bazel tsan config
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: |
        sudo ./ci/setup_cmake.sh
        sudo ./ci/setup_ci_environment.sh
        sudo ./ci/install_bazelisk.sh
    - name: run tests
      run: ./ci/do_ci.sh bazel.tsan

  bazel_osx:
    name: Bazel on MacOS
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: run tests
      run: ./ci/do_ci.sh bazel.test

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: setup
      run: |
        sudo ./ci/setup_cmake.sh
        sudo ./ci/setup_ci_environment.sh
        sudo ./ci/install_bazelisk.sh
    - name: run tests
      run: |
        env BENCHMARK_DIR=/benchmark
        ./ci/do_ci.sh benchmark
    - name: Upload benchmark results
      uses: actions/upload-artifact@v2
      with:
        name: benchmark_reports
        path: /home/runner/benchmark

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: sudo ./ci/install_format_tools.sh
    - name: run tests
      run: ./ci/do_ci.sh format

  windows:
    name: CMake -> exporter proto
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: setup
      run: |
        ./ci/setup_windows_cmake.ps1
        ./ci/setup_windows_ci_environment.ps1
        ./ci/install_windows_protobuf.ps1
    - name: run cmake test
      run: ./ci/do_ci.ps1 cmake.test
    - name: run otprotocol test
      run: ./ci/do_ci.ps1 cmake.exporter.otprotocol.test

  windows_bazel:
    name: Bazel Windows
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: ./ci/install_windows_bazelisk.ps1
    - name: run tests
      run: ./ci/do_ci.ps1 bazel.build

  windows_plugin_test:
    name: Plugin -> CMake Windows
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: setup
      run: |
        ./ci/setup_windows_cmake.ps1
        ./ci/setup_windows_ci_environment.ps1
    - name: run tests
      run: ./ci/do_ci.ps1 cmake.test_example_plugin

  code_coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: setup
      run: |
        sudo ./ci/setup_cmake.sh
        sudo ./ci/setup_ci_environment.sh
    - name: run tests and generate report
      run: ./ci/do_ci.sh code.coverage
    - name: upload report
      uses: codecov/codecov-action@v1
      with:
        file: /home/runner/build/coverage.info

  docfx_check:
    name: DocFX check
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: install docfx
      run: choco install docfx -y
    - name: run ./ci/docfx.cmd
      shell: cmd
      run: ./ci/docfx.cmd
